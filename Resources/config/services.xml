<?xml version="1.0" ?>

<container xmlns="http://symfony.com/schema/dic/services"
           xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
           xsi:schemaLocation="http://symfony.com/schema/dic/services http://symfony.com/schema/dic/services/services-1.0.xsd">

    <services>
        <!--  Default JWT Encoder / Decoder -->
        <service id="lexik_jwt_authentication.encoder.default" class="Lexik\Bundle\JWTAuthenticationBundle\Encoder\DefaultEncoder">
            <argument type="service" id="lexik_jwt_authentication.jws_provider"/>
        </service>
        <!-- JWT Manager / Default implementation -->
        <service id="lexik_jwt_authentication.jwt_manager" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWTManager">
            <argument type="service" id="lexik_jwt_authentication.encoder"/>
            <argument type="service" id="event_dispatcher"/>
            <argument>%lexik_jwt_authentication.token_ttl%</argument>
            <call method="setUserIdentityField">
                <argument>%lexik_jwt_authentication.user_identity_field%</argument>
            </call>
        </service>
        <!--  JWS Provider -->
        <service id="lexik_jwt_authentication.jws_provider" class="Lexik\Bundle\JWTAuthenticationBundle\Services\JWSProvider" public="false">
            <argument type="service" id="lexik_jwt_authentication.key_loader"/>
            <argument>%lexik_jwt_authentication.encoder.encryption_engine%</argument>
            <argument>%lexik_jwt_authentication.encoder.signature_algorithm%</argument>
        </service>

        <!-- Abstract JWT Token Authenticator / Guard implementation -->
        <service id="lexik_jwt_authentication.security.guard.jwt_token_authenticator" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\JWTTokenAuthenticator" abstract="true">
            <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
            <argument type="service" id="event_dispatcher"/>
            <argument type="service" id="lexik_jwt_authentication.extractor.chain_extractor"/>
        </service>
        <!-- Default JWT Token Authenticator -->
        <service id="lexik_jwt_authentication.jwt_token_authenticator" parent="lexik_jwt_authentication.security.guard.jwt_token_authenticator" />

        <!-- Abstract FormLogin Authenticator / Guard implementation -->
        <service id="lexik_jwt_authentication.security.guard.form_login_authenticator" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Guard\FormLoginAuthenticator" abstract="true">
            <argument type="service" id="security.password_encoder" />
            <argument type="service" id="lexik_jwt_authentication.handler.authentication_success" />
            <argument type="service" id="lexik_jwt_authentication.handler.authentication_failure" />
        </service>
        <!-- Default FormLogin Authenticator -->
        <service id="lexik_jwt_authentication.form_login_authenticator" parent="lexik_jwt_authentication.security.guard.form_login_authenticator" />

        <!-- JWT Authentication response interceptor -->
        <service id="lexik_jwt_authentication.handler.authentication_success" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationSuccessHandler">
            <argument type="service" id="lexik_jwt_authentication.jwt_manager"/>
            <argument type="service" id="event_dispatcher"/>
            <tag name="monolog.logger" channel="security" />
        </service>
        <service id="lexik_jwt_authentication.handler.authentication_failure" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\Authentication\AuthenticationFailureHandler">
            <tag name="monolog.logger" channel="security" />
            <argument type="service" id="event_dispatcher"/>
        </service>

        <!-- Key Loaders -->
        <service id="lexik_jwt_authentication.key_loader.abstract"  abstract="true" public="false">
            <argument>%lexik_jwt_authentication.private_key_path%</argument>
            <argument>%lexik_jwt_authentication.public_key_path%</argument>
            <argument>%lexik_jwt_authentication.pass_phrase%</argument>
        </service>
        <service id="lexik_jwt_authentication.key_loader.openssl" class="Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\OpenSSLKeyLoader" parent="lexik_jwt_authentication.key_loader.abstract"/>
        <service id="lexik_jwt_authentication.key_loader.phpseclib" class="Lexik\Bundle\JWTAuthenticationBundle\Services\KeyLoader\SecLibKeyLoader" parent="lexik_jwt_authentication.key_loader.abstract"/>

        <!-- JWT Security Authentication Provider (Deprecated in 2.0) -->
        <service id="lexik_jwt_authentication.security.authentication.provider" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Authentication\Provider\JWTProvider" public="false">
            <argument /> <!-- User Provider -->
            <argument type="service" id="lexik_jwt_authentication.jwt_manager" />
            <call method="setUserIdentityField">
                <argument>%lexik_jwt_authentication.user_identity_field%</argument>
            </call>
            <argument type="service" id="event_dispatcher"/>
            <deprecated>The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
        </service>
        <!-- JWT Security Authentication Listener (Deprecated in 2.0) -->
        <service id="lexik_jwt_authentication.security.authentication.listener" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Firewall\JWTListener" public="false">
            <argument type="service" id="security.token_storage"/>
            <argument type="service" id="security.authentication.manager"/>
            <argument /> <!-- Options -->
            <call method="setDispatcher">
                <argument type="service" id="event_dispatcher"/>
            </call>
            <deprecated>The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
        </service>
        <!-- JWT Security Authentication Entry Point (Deprecated in 2.0) -->
        <service id="lexik_jwt_authentication.security.authentication.entry_point" class="Lexik\Bundle\JWTAuthenticationBundle\Security\Http\EntryPoint\JWTEntryPoint" public="false">
            <deprecated>The "%service_id%" service is deprecated since LexikJWTAuthenticationBundle version 2.0 and will be removed in 3.0</deprecated>
        </service>
        <!-- Chain Token Extractor -->
        <service id="lexik_jwt_authentication.extractor.chain_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\ChainTokenExtractor" public="false">
            <argument type="collection" />
        </service>
        <!-- Authorization Header Token Extractor -->
        <service id="lexik_jwt_authentication.extractor.authorization_header_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\AuthorizationHeaderTokenExtractor">
            <argument /> <!-- Header Value Prefix -->
            <argument /> <!-- Header Value Name -->
        </service>
        <!-- Query Parameter Token Extractor -->
        <service id="lexik_jwt_authentication.extractor.query_parameter_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\QueryParameterTokenExtractor">
            <argument /> <!-- Parameter Name -->
        </service>
        <!-- Cookie Token Extractor -->
        <service id="lexik_jwt_authentication.extractor.cookie_extractor" class="Lexik\Bundle\JWTAuthenticationBundle\TokenExtractor\CookieTokenExtractor">
            <argument /> <!-- Name -->
        </service>
    </services>

</container>
